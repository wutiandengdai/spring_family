{"version":3,"sources":["logo.svg","services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,I,+CCATA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAIlD,SAAiBC,EACDC,EACAC,EACAC,GACZ,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC9C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAzBjBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YA2BVR,Q,OCuEAiB,E,kDAjGX,WAAaC,GAAO,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTf,KAAM,GACNC,EAAG,GACHC,EAAG,GACHc,QAAS,GACTb,MAAO,GAGX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXL,E,qDAcnB,WAA0B,IAAD,OACrBtB,EAAUwB,YAAYC,MAClB,SAAAC,GACOA,EAAIC,GACHD,EAAIE,OAAOH,MACP,SAAAG,GACI,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAKpB,EAAKc,cAAc,kC,0BAMnC,SAAcC,GACV,IAAMC,EAAKD,EAAME,OAAOD,KACxBE,KAAKL,SAAL,eACKG,EAAQD,EAAME,OAAOE,U,gCAK9B,SAAmBJ,GAAQ,IAAD,OACtBA,EAAMK,iBACNpC,EAAUqC,UAAWH,KAAKf,MAAMf,KAAM8B,KAAKf,MAAMd,EAAG6B,KAAKf,MAAMb,EAAG4B,KAAKf,MAAMZ,OACxEkB,MAAK,SAAAC,GACCA,EAAIC,GACHD,EAAIE,OAAOH,MACP,SAAAG,GACOA,EAAKU,QACJ,EAAKR,cAAe,0CAEpB,EAAKA,cAAc,oBAAsBF,EAAKW,cACpC,yCAKtB,EAAKT,cAAe,oC,2BAMpC,SAAeU,GACXN,KAAKL,SAAS,CACVT,QAASoB,M,oBAKjB,WACI,OACI,gCACI,gCACI,sDACA,+BACKN,KAAKf,MAAMd,EADhB,MACsB6B,KAAKf,MAAMb,QAGrC,uBAAMmC,SAAUP,KAAKb,mBAArB,UACI,iDACA,uBAAOqB,KAAK,OAAOC,UAAU,KAAKX,KAAK,OAC/BG,MAAOD,KAAKf,MAAMf,KAAMwC,SAAUV,KAAKX,eAC/C,uBACA,iDACA,uBAAOmB,KAAK,SAASG,IAAI,IAAIb,KAAK,QAC1BG,MAAOD,KAAKf,MAAMZ,MAAOqC,SAAUV,KAAKX,eAChD,uBACA,uBACA,uBAAOmB,KAAK,SAASP,MAAM,cAE/B,6BAAKD,KAAKf,MAAMC,iB,GA7FC0B,aCSlBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.67fa0187.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","class ApiClient{\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n\n    static challenge():Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n\n    static sendGuess(user: string, \n                    a:number, \n                    b:number,\n                    guess:number): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT, \n        {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userAlias: user,\n                factorA: a,\n                factorB: b,\n                guess: guess\n            })\n        });\n    }\n}\n\nexport default ApiClient;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\n\nclass ChallengeComponent extends React.Component {\n    \n    constructor (props){\n        super(props);\n        this.state = {\n            user: '',\n            a: '',\n            b: '',\n            message: '',\n            guess: 0\n        };\n\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void{\n        ApiClient.challenge().then(\n            res => {\n                if(res.ok){\n                    res.json().then (\n                        json => {\n                            this.setState({\n                                a: json.factorA,\n                                b: json.factorB\n                            });\n                        }\n                    );\n                } else {\n                    this.updateMessage(\"Error reaching the server\");\n                }\n            }\n        );\n    }\n\n    handleChange (event) {\n        const name=event.target.name;\n        this.setState ({\n            [name] : event.target.value\n        })\n    };\n\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess (this.state.user, this.state.a, this.state.b, this.state.guess)\n            .then(res =>{\n                if(res.ok){\n                    res.json().then(\n                        json => {\n                            if(json.correct){\n                                this.updateMessage (\"Congratulations! Your guess is correct\")\n                            } else {\n                                this.updateMessage(\"Oops! Your guess \" + json.resultAttempt \n                                        + \" is not correct, please try again.\");\n                            }\n                        }\n                    );\n                } else {\n                    this.updateMessage (\"Error: server not available\")\n                }\n            });\n    }\n\n\n    updateMessage (m: string) {\n        this.setState({\n            message: m\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h3> Your Challenge is: </h3>\n                    <h2>\n                        {this.state.a} X {this.state.b}\n                    </h2>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>Your alias: </label>\n                    <input type=\"text\" maxLength=\"20\" name=\"user\"\n                            value={this.state.user} onChange={this.handleChange}/>\n                    <br/>\n                    <label>Your guess: </label>\n                    <input type=\"number\" min=\"0\" name=\"guess\"\n                            value={this.state.guess} onChange={this.handleChange}/>\n                    <br/>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;","import logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChallengeComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}