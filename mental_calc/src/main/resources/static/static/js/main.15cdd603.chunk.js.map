{"version":3,"sources":["logo.svg","services/ApiClient.js","components/RecentAttemptsComponent.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","alias","GET_ATTEMPTS_BY_ALIAS","RecentAttempsComponent","this","props","recentAttemps","map","resultAttempt","style","color","correct","id","React","ChallengeComponent","state","message","handleSubmitResult","bind","handleChange","retrieveChallenge","event","name","target","setState","value","preventDefault","sendGuess","then","res","ok","json","updateMessage","updateRecentAttempts","m","challenge","getAttempts","attemps","data","forEach","element","push","onSubmit","type","maxLength","onChange","min","length","RecentAttemptsComponent","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15cdd603.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","class ApiClient{\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\n\n    static challenge():Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n\n    static sendGuess(user: string, \n                    a:number, \n                    b:number,\n                    guess:number): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT, \n        {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userAlias: user,\n                factorA: a,\n                factorB: b,\n                guess: guess\n            })\n        });\n    }\n\n    static getAttempts(alias: string): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_ATTEMPTS_BY_ALIAS + alias);\n    }\n}\n\nexport default ApiClient;","import * as React from 'react';\n\nclass RecentAttempsComponent extends React.Component {\n\n    render(){\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th>Challenge</th>\n                        <th>Your Guess</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.recentAttemps.map( a =>\n                        <tr key={a.id}>\n                            <td>{a.factorA} X {a.factorB} </td>\n                            <td>{a.resultAttempt}</td>\n                            <td style={{ color:a.correct? 'green' : 'red'}}>\n                                {a.correct? \"Correct\" : (\"Incorrect (\" + a.factorA * a.factorB + \")\")}\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default RecentAttempsComponent;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\nimport RecentAttemptsComponent from '../components/RecentAttemptsComponent';\n\nclass ChallengeComponent extends React.Component {\n    \n    constructor (props){\n        super(props);\n        this.state = {\n            user: '',\n            a: '',\n            b: '',\n            message: '',\n            guess: 0,\n            recentAttemps: []\n        };\n\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void{\n        this.retrieveChallenge();\n    }\n\n\n    handleChange (event) {\n        const name=event.target.name;\n        this.setState ({\n            [name] : event.target.value\n        })\n    };\n\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess (this.state.user, this.state.a, this.state.b, this.state.guess)\n            .then(res =>{\n                if(res.ok){\n                    res.json().then(\n                        json => {\n                            if(json.correct){\n                                this.updateMessage (\"Congratulations! Your guess is correct\")\n                            } else {\n                                this.updateMessage(\"Oops! Your guess \" + json.resultAttempt \n                                        + \" is not correct, please try again.\");\n                            }\n                        }\n                    );\n                } else {\n                    this.updateMessage (\"Error: server not available\")\n                }\n            });\n\n        //retrieve attempts by user and get new challenge, clear input fields\n        this.updateRecentAttempts(this.state.user);\n        this.retrieveChallenge();\n        this.setState ({\n            user: '',\n            guess: 0\n        })\n    }\n\n\n    updateMessage (m: string) {\n        this.setState({\n            message: m\n        });\n    }\n\n\n    //retrive challenge 1)after load; 2)after submit\n    retrieveChallenge(){\n        ApiClient.challenge().then(\n            res => {\n                if(res.ok){\n                    res.json().then (\n                        json => {\n                            this.setState({\n                                a: json.factorA,\n                                b: json.factorB\n                            });\n                        }\n                    );\n                } else {\n                    this.updateMessage(\"Error reaching the server\");\n                }\n            }\n        );\n    }\n\n    //Update recent Attemps on Submission\n    updateRecentAttempts (userAlias: string){\n        ApiClient.getAttempts(userAlias).then(\n            res => {\n                if (res.ok) {\n                    let attemps: Attempt [] = [];\n                    res.json().then( data=> {\n                        data.forEach(element => {\n                            attemps.push(element);\n                        });\n                        this.setState({\n                            recentAttemps: attemps\n                        })\n                    })\n                }\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h3> Your Challenge is: </h3>\n                    <h2>\n                        {this.state.a} X {this.state.b}\n                    </h2>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>Your alias: </label>\n                    <input type=\"text\" maxLength=\"20\" name=\"user\"\n                            value={this.state.user} onChange={this.handleChange}/>\n                    <br/>\n                    <label>Your guess: </label>\n                    <input type=\"number\" min=\"0\" name=\"guess\"\n                            value={this.state.guess} onChange={this.handleChange}/>\n                    <br/>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n                <br/>\n                <br/>\n                { this.state.recentAttemps.length > 0 && \n                    <RecentAttemptsComponent recentAttemps={this.state.recentAttemps}/>}\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;","import logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChallengeComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}